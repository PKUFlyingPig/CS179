CS 179: GPU Computing
Lab 1: Introduction to CUDA
Name: FlyingPig

================================================================================
Question 1: Common Errors (20 points)
================================================================================

--------------------------------------------------------------------------------
1.1
--------------------------------------------------------------------------------
Issue: 
The first line assign the value to the pointer but not the value this pointer points to.
Fix:
void test1() {
    int *a;
    *a = 3;
    *a = *a + 2;
    printf("%d\n", *a);
}

--------------------------------------------------------------------------------
1.2
--------------------------------------------------------------------------------
Issue:
The type of b is int but not pointer.
Fix:
void test2() {
    int *a, *b;
    ...........
}


--------------------------------------------------------------------------------
1.3
--------------------------------------------------------------------------------
Issue: 
The required allocated memory size is sizeof(int) * N;

Fix:
void test3() {
    int i, *a = (int *) malloc(1000 * sizeof(int));
    .........
}

--------------------------------------------------------------------------------
1.4
--------------------------------------------------------------------------------
Issue: 
You need to allocate memory for the 1D array;

Fix:
void test4() {
    int **a = (int **) malloc(3 * sizeof (int *));
    for (int i = 0; i < 3; i++) {
        *(a + i) = (int *) malloc(100 * sizeof(int));
    }
    a[1][1] = 5;
}
--------------------------------------------------------------------------------
1.5
--------------------------------------------------------------------------------
Issue:
You need to check the value which a points to but not a itself.

Fix:
void test5() {
    int *a = (int *) malloc(sizeof (int));
    scanf("%d", a);
    if (!(*a))
        printf("Value is 0\n");
}

================================================================================
Question 2: Parallelization (30 points)
================================================================================

--------------------------------------------------------------------------------
2.1
--------------------------------------------------------------------------------
y_1 will have an easier and faster implementation on the GPU because y_1[n] does not 
rely on its previous value which needs more synchronization to compute correctly.

--------------------------------------------------------------------------------
2.2
--------------------------------------------------------------------------------
If c is close to 1, the term y[n - k]'s contribution to y[n] is negligible, so we 
can derive y[n] = c * x[n] + (1-c) * x[n - 1] + (1-c)^2 * x[n - 2] and use this equation 
to compute y[n].

================================================================================
Question 3: Small-Kernel Convolution (50 points)
================================================================================
